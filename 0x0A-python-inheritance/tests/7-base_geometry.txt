Doctest cases for 0x0A-7: integer validator
-------------------------------------------

>>> BaseG = __import__("7-base_geometry").BaseGeometry
>>> a = BaseG()
>>> ivalid = a.integer_validator

>>> ivalid("my_int", 12)

>>> ivalid("width", 89)

>>> ivalid("", 12)

>>> a.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> ivalid()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> ivalid(50)
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> ivalid("", 12)

>>> ivalid("name", "string")
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", None)
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", {3, 1})
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", ())
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", [])
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", True)
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("name", 3.5)
Traceback (most recent call last):
TypeError: name must be an integer
>>> ivalid("x", 0)
Traceback (most recent call last):
ValueError: x must be greater than 0
>>> ivalid("x", -4)
Traceback (most recent call last):
ValueError: x must be greater than 0
